/*
 * Copyright (c) 2020 duckyb
 *
 * SPDX-License-Identifier: MIT
 */

// TODO:
// * Review and remove unused keys and add missing keys.
// * Write up config on Draw.io
// * Copy config to this file.
// * 

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// Layer definitions
#define BASE 0      // ALPHA
#define SYM 1       // SYMBOL PRIMARY
#define EXT 2       // MODIFIERS | MOBILITY
#define FNC 3       // FUNCTIONS
#define SYM2 4      // SYMBOL SECONDARY
#define ACCENT 5    // Remove, Not needed. 
#define SETTINGS 6  // BT, Possibly move to a differnt area.
// -----------------

// Italian keymap
// TODO: remove once replace.
// Row 1
#define IT_BSLH GRAVE            // backslash
#define IT_SQUOT MINUS           // '
#define IT_IGRV EQUAL            // ì

// Row 2
#define IT_EGRV LBKT             // è
#define IT_PLUS SLASH            // +


// Row 3
#define IT_OGRV SEMI             // ò
#define IT_AGRV APOS             // à
#define IT_UGRV NON_US_HASH      // ù

// Row 4
#define IT_LESS NON_US_BSLH      // <
#define IT_MINUS RBKT            // -


// Shifted symbols
// Row 1
#define IT_PIPE LS(GRAVE)        // |
#define IT_EXCL LS(N1)           // !
#define IT_DQUOT LS(N2)          // "
#define IT_PND LS(N3)            // £
#define IT_USD LS(N4)            // $
#define IT_PERC LS(N5)           // %
#define IT_AND LS(N6)            // &
#define IT_FSLH LS(N7)           // /
#define IT_LPAR LS(N8)           // (
#define IT_RPAR LS(N9)           // )
#define IT_EQL LS(N0)            // =
#define IT_QUES LS(MINUS)        // ?
#define IT_CARET LS(EQUAL)       // ^

// Row 2
#define IT_EACU LS(LBKT)         // é
#define IT_AST LS(RBKT)          // *

// Row 3
#define IT_CCED LS(SEMI)         // ç
#define IT_DEG LS(APOS)          // °
#define IT_SECT LS(NON_US_HASH)  // §

// Row 4
#define IT_GREAT LS(NON_US_BSLH) // >
#define IT_UNDER LS(SLASH)       // _



// AltGr symbols
// Row 2
#define IT_EUR RA(E)             // €
#define IT_LBKT RA(LBKT)         // [
#define IT_RBKT RA(RBKT)         // ]

// Row 3
#define IT_AT RA(SEMI)           // @
#define IT_HASH RA(APOS)         // #


// Shift+Alt symbols
// Row 2
#define IT_LBRC LS(RA(LBKT))     // {
#define IT_RBRC LS(RA(RBKT))     // }


// Old Personalised Specials
#define IT_BKTK RA(MINUS)        // `
#define IT_TILDE RA(EQUAL)       // ~
#define IT_CEGR RA(LS(E))        // È
// -----------------



// Base Keymap
// LEFT ROW 1 
#define BASE_01 &kp Q
#define BASE_02 &kp W
#define BASE_03 &kp E
#define BASE_04 &kp R
#define BASE_05 &kp T
// RIGHT ROW 1
#define BASE_06 &kp Y
#define BASE_07 &kp U 
#define BASE_08 &kp I
#define BASE_09 &kp O 
#define BASE_10 &kp P 
// LEFT ROW 2
#define BASE_11 &kp A
#define BASE_12 &kp S 
#define BASE_13 &kp D 
#define BASE_14 &kp F 
#define BASE_15 &kp G 
// RIGHT ROW 2
#define BASE_16 &kp H 
#define BASE_17 &kp J 
#define BASE_18 &kp K 
#define BASE_19 &kp L 
#define BASE_20 &kp IT_OGRV
// LEFT ROW 3
#define BASE_21 &kp Z 
#define BASE_22 &kp X 
#define BASE_23 &kp C 
#define BASE_24 &kp V 
#define BASE_25 &kp B 
// RIGHT ROW 3
#define BASE_26 &kp N 
#define BASE_27 &kp M 
#define BASE_28 &kp COMMA 
#define BASE_29 &kp DOT 
#define BASE_30 &kp IT_UGRV 
// LEFT BOTTOM
#define BASE_31 &mo EXT 
#define BASE_32 &qt LSHIFT space
// RIGHT BOTTOM
#define BASE_33 $kp scape
#define BASE_34 &sl SYM
// -----------------


&sk {
	// don't release mods on other mods presses
	ignore-modifiers;
};


/ {
	behaviors {
		// Enables holding the first mod-tap key
		// by performing a tap-release-hold sequence.
		// To use it: "&qt KEYCODE1 KEYCODE2"
		qt: quick_tap {
			compatible = "zmk,behavior-hold-tap";
			label = "QUICK_TAP";
			#binding-cells = <2>;
			flavor = "hold-preferred";
			tapping-term-ms = <200>;
			quick-tap-ms = <200>;
			bindings = <&kp>, <&kp>;
		};
	};

	macros {
		// sometimes my device thinks a modifier is being held down
		// pressing all modifiers fixes it.
		unstick: unstick {
			label = "ZM_unstick";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp LSHIFT &kp RSHIFT &kp LCTRL &kp RCTRL &kp LALT &kp RALT &kp LGUI &kp RGUI>;
		};
	};

	combos {
		compatible = "zmk,combos";
		// both right thumb keys
		combo_accent {
			timeout-ms = <200>;
			key-positions = <32 33>;
			bindings = <&mo ACCENT>;
		};
		// internal-left & external-right thumb keys
		combo_sym2 {
			timeout-ms = <200>;
			key-positions = <31 33>;
			bindings = <&mo SYM2>;
		};
		// both left thumb keys
		combo_settings {
			timeout-ms = <200>;
			key-positions = <30 31>;
			bindings = <&mo SETTINGS>;
		};
		// left index & middle fingers (home-row)
		// hold control & space for Adobe workflow
		combo_ctrl_space {
			timeout-ms = <200>;
			key-positions = <12 13>;
			bindings = <&kp LC(SPACE)>;
			layers = <BASE>;
		};
	};

	keymap {
		compatible = "zmk,keymap";
		// Base alpha layer
		default_layer {
			label = "Base";
			bindings = <
			BASE_01 BASE_02 BASE_03 BASE_04 BASE_05   BASE_06 BASE_07 BASE_08 BASE_09 BASE_10 
			&kp A &kp S &kp D &kp F &kp G           &kp H &kp J  &kp K     &kp L &kp IT_OGRV
			&kp Z &kp X &kp C &kp V &kp B           &kp N &kp M  &kp COMMA &kp DOT &kp IT_UGRV
							&mo EXT &qt LSHIFT SPACE           &kp SPACE &sl SYM
			>;
		};

		// Numbers and high frequency symbols
		sym_layer {
			label = "Sym.";
			bindings = <
			&kp N1 &kp N2 &kp N3 &kp N4 &kp N5		                                    &kp N6 &kp N7 &kp N8 &kp N9 &kp N0
			&kp IT_LESS &kp IT_USD &kp IT_LPAR &kp IT_LBRC &kp IT_LBKT  &kp IT_EQL &kp IT_QUES &kp IT_SQUOT &kp IT_MINUS &kp IT_AST
			&kp IT_GREAT &kp IT_PERC &kp IT_RPAR &kp IT_RBRC &kp IT_RBKT 	&kp IT_AT &kp IT_EXCL &kp IT_DQUOT &kp IT_PLUS &kp IT_FSLH
														&mo FNC  &mo SYM2       &trans &trans
			>;
		};

		// Main modifiers and arrow keys
		ext_layer {
			label = "Mods";
			bindings = <
			&kp ESC  &kp C_PREV &kp C_PP  &kp C_NEXT  &kp C_PAUSE    	&kp PG_UP  &kp HOME &kp UP &kp END &kp CAPS
			&sk LALT &sk LGUI  &sk LSHIFT  &sk LCTRL  &kp RALT 			&kp PG_DN &kp LEFT  &kp DOWN  &kp RIGHT   &kp DEL
			&kp LC(Z)  &kp LC(X) &kp LC(C) &kp TAB   &kp LC(V)          &kp LC(BSPC) &kp BSPC &trans &trans  &trans
																		&trans &kp LCTRL    &kp ENTER  &mo FNC 
			>;
		};

		// Function keys with modifiers
		fnc_layer {
			label = "FRow";
			bindings = <
			&kp F1 &kp F2 &kp F3 &kp F4 &kp F5                  &kp F6 &kp F7 &kp F8 &kp F9 &kp F10 
			&sk LALT &sk LGUI &sk LSHIFT &sk LCTRL &kp RALT     &kp F11 &kp F12  &kp PRINTSCREEN &trans &trans
			&none &none &none &none &none				          &none &none &none &none &none 
							  &none &none              &none &none  
			>;
		};

		// Low frequency symbols.
		symbols_2_layer {
			label = "Sym.2";
			bindings = <
			&kp IT_CARET &kp IT_UNDER &kp IT_PND &kp IT_EUR &kp IT_HASH         &none &none &none &none &none 
			&kp IT_BKTK &kp IT_TILDE &kp IT_BSLH &kp IT_PIPE &kp IT_AND         &none &none &none &none &none
			&none 			&none 			 &kp IT_SECT &kp IT_CCED &kp IT_DEG				  &none &none &none &none &none
																	&none &none        	&none &none 
			>;
		};

		// Used to type regional accents.I
    // TODO: Remove this layer.
		accent_layer {
			label = "Accent";
			bindings = <
			&none &none &none &none &none                         &none &none &none &none &none 
			&none &none &none &none &none                         &none &none &none &none &none
			&none &none &none &none &none                         &none &none &none &none &none
			                  &none &none                         &none &none 
			>;
		};

		// Used to change the keyboard's settings.
		settings_layer {
				label = "Sett.";
				bindings = <
				&bootloader &none &none &bt BT_CLR &bt BT_SEL 0               &bt BT_SEL 3 &none &unstick &none &bootloader 
				&none &none &none &none      &bt BT_SEL 1 						  &bt BT_SEL 4 &none &none &none &none
				&none &none &none &none      &bt BT_SEL 2               &bt BT_SEL 5 &none &none &none &none
										&none &none                         &none &none 
				>;
		};
	};
};
