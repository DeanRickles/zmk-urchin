/*
 * Copyright (c) 2020 duckyb
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// Layer definitions
#define BASE 0      // ALPHA
#define SYM 1       // SYMBOL PRIMARY
#define EXT 2       // MODIFIERS | MOBILITY
#define FNC 3       // FUNCTIONS
#define NUM 4      // SYMBOL SECONDARY

// ----------------------------------------------------------------------------------------------------
// Keymap - Variable Keys
// ----------------------------------------------------------------------------------------------------

// --------------------------------------------------
// Base Keymap
// --------------------------------------------------
// LEFT ROW 1
#define L00_01 Q
#define L00_02 W
#define L00_03 F
#define L00_04 P
#define L00_05 B
// RIGHT ROW 1
#define L00_06 J
#define L00_07 L 
#define L00_08 U
#define L00_09 Y
#define L00_10 SINGLE_QUOTE
// LEFT ROW 2
#define L00_11 A
#define L00_12 R
#define L00_13 S
#define L00_14 T
#define L00_15 G
// RIGHT ROW 2
#define L00_16 M
#define L00_17 N
#define L00_18 E
#define L00_19 I
#define L00_20 O
// LEFT ROW 3
#define L00_21 Z
#define L00_22 X
#define L00_23 C
#define L00_24 D
#define L00_25 B
// RIGHT ROW 3
#define L00_26 K
#define L00_27 H
#define L00_28 COMMA
#define L00_29 DOT
#define L00_30 SLASH
// LEFT BOTTOM
#define L00_31 EXT
#define L00_32 LSHIFT SPACE
// RIGHT BOTTOM
#define L00_33 SPACE
#define L00_34 SYM

// --------------------------------------------------
// SYM Keymap
// --------------------------------------------------
// LEFT ROW 1
#define L01_01 EXCLAMATION
#define L01_02 DOUBLE_QUOTES
#define L01_03 LS(N3) // Unsure if POUND exists.
#define L01_04 DOLLAR
#define L01_05 PERCENT
// RIGHT ROW 1
#define L01_06 EQUAL
#define L01_07 GRAVE
#define L01_08 COLON
#define L01_09 SEMICOLON
#define L01_10 PLUS
// LEFT ROW 2
#define L01_11 LALT
#define L01_12 LGUI
#define L01_13 LSHIFT
#define L01_14 LCTRL
#define L01_15 RALT
// RIGHT ROW 2
#define L01_16 ASTERISK
#define L01_17 LPAR
#define L01_18 LBRC
#define L01_19 LBKT
#define L01_20 MINUS
// LEFT ROW 3
#define L01_21 BACKSLASH
#define L01_22 PIPE
#define L01_23 HASH
#define L01_24 TILDE
#define L01_25 AMPERSAND
// RIGHT ROW 3
#define L01_26 AT_SIGN
#define L01_27 RPAR
#define L01_28 RBRC
#define L01_29 RBKT
#define L01_30 UNDERSCORE
// LEFT BOTTOM
//#define L01_31 &none
#define L01_32 EXT
// RIGHT BOTTOM
#define L01_33 NUM
//#define L01_34 &none

// --------------------------------------------------
// Ext Keymap
// --------------------------------------------------
// LEFT ROW 1
#define L02_01 ESC
//#define L02_02 &none
//#define L02_03 &none
//#define L02_04 &none
#define L02_05 INSERT
// RIGHT ROW 1
#define L02_06 PAGE_UP
#define L02_07 HOME
#define L02_08 UP_ARROW
#define L02_09 END
#define L02_10 CAPSLOCK
// LEFT ROW 2
#define L02_11 LALT
#define L02_12 LGUI
#define L02_13 LSHIFT
#define L02_14 LCTRL
#define L02_15 RALT
// RIGHT ROW 2
#define L02_16 PAGE_DOWN
#define L02_17 LEFT_ARROW
#define L02_18 DOWN_ARROW
#define L02_19 RIGHT_ARROW
#define L02_20 DELETE
// LEFT ROW 3
#define L02_21 LC(Z)        // ctrl+z = undo
#define L02_22 LC(X)        // ctrl+x = cut
#define L02_23 LC(C)        // ctrl+c = Copy
#define L02_24 TAB
#define L02_25 LC(v)        // ctrl+v = Paste
// RIGHT ROW 3
#define L02_26 LC(BACKSPACE)
#define L02_27 BACKSPACE
//#define L02_28 &none
//#define L02_29 &none
#define L02_30 PRINTSCREEN
// LEFT BOTTOM
//#define L02_31 &none
//#define L02_32 &none
// RIGHT BOTTOM
#define L02_33 ENTER
#define L02_34 FNCV

// --------------------------------------------------
// Fnc Keymap
// --------------------------------------------------
// LEFT ROW 1
  #define L03_01 &bt BT_SEL 0
#define L03_02 &bt BT_SEL 1
#define L03_03 &bt BT_SEL 2
#define L03_04 &bt BT_SEL 3
#define L03_05 &kp C_BRIGHTNESS_INC
// RIGHT ROW 1
#define L03_06 &kp F6
#define L03_07 &kp F7
#define L03_08 &kp F8
#define L03_09 &kp F9
#define L03_10 &BT BT_CLR       // Clear BT profile
// LEFT ROW 2
#define L03_11 &sk LALT
#define L03_12 &sk LGUI
#define L03_13 &sk LSHIFT
#define L03_14 &sk LCTRL
#define L03_15 &kp C_BRIGHTNESS_DEC
// RIGHT ROW 2
#define L03_16 &kp F11
#define L03_17 &kp F4
#define L03_18 &kp F5
#define L03_19 &kp F6
#define L03_20 &kp SCROLLLOCK
// LEFT ROW 3
#define L03_21 &BOOTLOADER
#define L03_22 &kp C_VOLUME_DOWN
#define L03_23 &kp C_MUTE
#define L03_24 &kp C_VOLUME_UP
#define L03_25 &kp ENTER
// RIGHT ROW 3
#define L03_26 &kp F10
#define L03_27 &kp F1
#define L03_28 &kp F2
#define L03_29 &kp F3
#define L03_30 &BOOTLOADER
// LEFT BOTTOM
#define L03_31 &none
#define L03_32 &none
// RIGHT BOTTOM
//#define L03_33 &none
//#define L03_34 &none

// --------------------------------------------------
// Num Keymap
// --------------------------------------------------
// LEFT ROW 1 
#define L04_01 QUESTION     // ?
#define L04_02 LESS_THEN    // <
#define L04_03 GREATER_THEN // >
#define L04_04 AT_SIGN
#define L04_05 KP_NUMLOCK
// RIGHT ROW 1
#define L04_06 EQUAL
#define L04_07 N7
#define L04_08 N8
#define L04_09 N9
#define L04_10 PLUS
// LEFT ROW 2
#define L04_11 LALT
#define L04_12 LGUI
#define L04_13 LSHIFT
#define L04_14 LCTRL
#define L04_15 RALT
// RIGHT ROW 2
#define L04_16 ASTERISK
#define L04_17 N4
#define L04_18 N5
#define L04_19 N6
#define L04_20 MINUS
// LEFT ROW 3
//#define L04_21 &none
//#define L04_22 &none
#define L04_23 TAB
#define L04_24 BACKSPACE
#define L04_25 ENTER
// RIGHT ROW 3
#define L04_26 N0
#define L04_27 N1
#define L04_28 N2
#define L04_29 N3
#define L04_30 SLASH
// LEFT BOTTOM
//#define L04_31 &none
//#define L04_32 &none
// RIGHT BOTTOM
//#define L04_33 &none
//#define L04_34 &none

// ----------------------------------------------------------------------------------------------------
// Behaviours 
// ----------------------------------------------------------------------------------------------------

&sk {
	// don't release mods on other mods presses
	ignore-modifiers;
};


/ {
	behaviors {
		// Enables holding the first mod-tap key
		// by performing a tap-release-hold sequence.
		// To use it: "&qt KEYCODE1 KEYCODE2"
		qt: quick_tap {
			compatible = "zmk,behavior-hold-tap";
			label = "QUICK_TAP";
			#binding-cells = <2>;
			flavor = "hold-preferred";
			tapping-term-ms = <200>;
			quick-tap-ms = <200>;
			bindings = <&kp>, <&kp>;
		};
	};

	macros {
		// sometimes my device thinks a modifier is being held down
		// pressing all modifiers fixes it.
		unstick: unstick {
			label = "ZM_unstick";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp LSHIFT &kp RSHIFT &kp LCTRL &kp RCTRL &kp LALT &kp RALT &kp LGUI &kp RGUI>;
		};
	};

	combos {
		compatible = "zmk,combos";
		// both right thumb keys
		combo_accent {
			timeout-ms = <200>;
			key-positions = <32 33>;
			bindings = <&mo NUM>;
		};

		// both left thumb keys
		combo_settings {
			timeout-ms = <200>;
			key-positions = <30 31>;
			bindings = <&mo FNC>;
		};
	};

// Was in the Combo section
//		// internal-left & external-right thumb keys
//		combo_sym2 {
//			timeout-ms = <200>;
//			key-positions = <31 33>;
//			bindings = <&mo SYM>;
//		};
//
//		// left index & middle fingers (home-row)
//		// hold control & space for Adobe workflow
//		combo_ctrl_space {
//			timeout-ms = <200>;
//			key-positions = <12 13>;
//			bindings = <&kp LC(SPACE)>;
//			layers = <BASE>;
//		};

// ----------------------------------------------------------------------------------------------------
// VARIABLE KEYMAPS
// ----------------------------------------------------------------------------------------------------

	keymap {
		compatible = "zmk,keymap";
		// Base alpha layer
		default_layer {
			label = "Base";
			bindings = <
			&kp L00_01 &kp L00_02 %kp L00_03 &kp L00_04 &kp L00_05   &kp L00_06 &kp L00_07 %kp L00_08 &kp L00_09 &kp L00_10 
			&kp L00_11 &kp L00_12 &kp L00_13 &kp L00_14 &kp L00_15   &kp L00_16 &kp L00_17 &kp L00_18 &kp L00_19 &kp L00_20 
			&kp L00_21 &kp L00_22 &kp L00_23 &kp L00_24 &kp L00_25   &kp L00_26 &kp L00_27 &kp L00_28 &kp L00_29 &kp L00_30
	                                     &mo L00_31 &mt L00_32   &kp L00_33 &mo L00_34
			>;
		};

		// Numbers and high frequency symbols
		sym_layer {
			label = "SYM";
			bindings = <
			&kp L01_01 &kp L01_02 &kp L01_03 &kp L01_04 &kp L01_05   &kp L01_06 &kp L01_07 &kp L01_08 &kp L01_09 &kp L01_10 
			&sk L01_11 &sk L01_12 &sk L01_13 &sk L01_14 &sk L01_15   &kp L01_16 &kp L01_17 &kp L01_18 &kp L01_19 &kp L01_20 
			&kp L01_21 &kp L01_22 &kp L01_23 &kp L01_24 &kp L01_25   &kp L01_26 &kp L01_27 &kp L01_28 &kp L01_29 &kp L01_30
		                                        &none &mo L01_32   &mo L01_33 &none
			>;
    };

		// Main modifiers and arrow keys
		ext_layer {
			label = "EXT";
			bindings = <
			&kp L02_01 &none      &none      &none      &kp L02_05   &kp L02_06 &kp L02_07 &kp L02_08 &kp L02_09 &kp L02_10 
			&sk L02_11 &sk L02_12 &sk L02_13 &sk L02_14 &sk L02_15   &kp L02_16 &kp L02_17 &kp L02_18 &kp L02_19 &kp L02_20 
			&kp L02_21 &kp L02_22 &kp L02_23 &kp L02_24 &kp L02_25   &kp L02_26 &kp L02_27 &none      &none      &kp L02_30
		                                   &none      &none        &kp L02_33 &mo L02_34
			>;
		};

		// Function keys with modifiers
		fnc_layer {
			label = "FNC";
			bindings = <
			 &BT L03_01 &bt L03_02 &bt L03_03 &bt L03_04 &kp L03_05   &kp L03_06 &kp L03_07 &kp L03_08 &kp L03_09 &kp L03_10 
			 &sk L03_11 &sk L03_12 &sk L03_13 &sk L03_14 &kp L03_15   &kp L03_16 &kp L03_17 &kp L03_18 &kp L03_19 &kp L03_20
			$BOOTLOADER &kp L03_22 &kp L03_23 &kp L03_24 &kp L03_25   &kp L03_26 &kp L03_27 &kp L03_28 &kp L03_29 $BOOTLOADER
		                                    &none      &none        &none      &none
			>;
		};

		num_layer {
			label = "NUM";
      bindings = <
			  &kp L04_01 &kp L04_02 &kp L04_03 &kp L04_04 &kp L04_05   &kp L04_06 &kp L04_07 &kp L04_08 &kp L04_09 &kp L04_10 
			  &sk L04_11 &sk L04_12 &sk L04_13 &sk L04_14 &kp L04_15   &kp L04_16 &kp L04_17 &kp L04_18 &kp L04_19 &kp L04_20
        &none      &none      &kp L04_23 &kp L04_24 &kp L04_25   &kp L04_26 &kp L04_27 &kp L04_28 &kp L04_29 &kp L04_30
		                                     &none      &none        &none      &none
        >;
		};
	};
};
